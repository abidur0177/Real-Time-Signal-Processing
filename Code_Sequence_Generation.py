{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3bdccd47",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from random import seed\n",
    "from random import gauss\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6a41f922",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the Order: 8\n",
      "1\n",
      "0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Generating Sequence\n",
    "def Hadamard(n):\n",
    "    H = np.full((n,n), True)\n",
    "\n",
    "\n",
    "    i1 = 1\n",
    "    integer = np.log2(n)\n",
    "    if round(integer)==integer:\n",
    "        while i1 < n:\n",
    "            for i2 in range(i1):\n",
    "                for i3 in range(i1):\n",
    "                    H[i2+i1][i3]    = H[i2][i3]\n",
    "                    H[i2][i3+i1]    = H[i2][i3]\n",
    "                    H[i2+i1][i3+i1] = not H[i2][i3]\n",
    "            i1 += i1\n",
    "\n",
    "        # Write the matrix.\n",
    "        for i in range(n):\n",
    "            for j in range(n):\n",
    "                if H[i][j]:\n",
    "                    H[i][j] = 1\n",
    "                else:\n",
    "                    H[i][j] = 0\n",
    "\n",
    "        H1 = H.astype(int)\n",
    "        return H1\n",
    "\n",
    "    else:\n",
    "        print(\"Enter n of power 2 please\")\n",
    "        \n",
    "#Dot Product of Two Rows        \n",
    "def dot_product(row1, row2):\n",
    "    #corr = np.zeros(math.factorial(n-1))\n",
    "    len_row1 = len(row1)\n",
    "    if len_row1==len(row2):\n",
    "        product = (np.dot(row1,row2))/len_row1\n",
    "        return product\n",
    "    else:\n",
    "        return none\n",
    "        \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#check_Orthogonality        \n",
    "def find_minimum(Hada):\n",
    "    n = Hada.shape[1] #length of the matrix\n",
    "    corr = 1000 #Creating the storage matrix for dot products\n",
    "    \n",
    "    \n",
    "    corr_index = np.zeros((2),int)\n",
    "    for i in range(n):\n",
    "        for j in range(i+1,n):\n",
    "            product = dot_product(Hada[i],Hada[j])\n",
    "            if product < corr:\n",
    "                corr = product\n",
    "                corr_index[0] = i\n",
    "                corr_index[1] = j\n",
    "                \n",
    "    i = corr_index[0]  \n",
    "    j = corr_index[1]\n",
    "    row_i = Hada[i]\n",
    "    row_j = Hada[j]\n",
    "    \n",
    "    return [row_i, row_j]\n",
    "\n",
    "def cdma_short(data, chips): #Short Code\n",
    "    ld = len(data)\n",
    "    lc = len(chips)\n",
    "    out = np.zeros(ld*lc)\n",
    "    i = 0\n",
    "    for d in data:\n",
    "        for c in chips:\n",
    "            out[i] = 1-(d+c)%2 #Unipolar Inverting\n",
    "            i += 1\n",
    "    return out\n",
    "\n",
    "data_length = 1000\n",
    "\n",
    "data1 = np.random.randint(0,2, data_length)\n",
    "data2 = np.random.randint(0,2, data_length)\n",
    "\n",
    "Hada = Hadamard(int(input(\"Enter the Order: \")))\n",
    "sequences = find_minimum(Hada)\n",
    "\n",
    "\n",
    "cdma_seq1 = cdma_short(data1,sequences[0])\n",
    "cdma_seq2 = cdma_short(data2,sequences[1])\n",
    "\n",
    "#---------- Parameter Settings -----------\n",
    "ovs = 32 #Oversampling Factor\n",
    "rate = 1e5 #Data Rate in Hz = 100 kHz\n",
    "\n",
    "data = [cdma_seq1,cdma_seq2] #Data Streams\n",
    "data_shift = [0,0] #Shift of Data Streams (Change Synchronization)\n",
    "\n",
    "\n",
    "#data = [[1,0,0,1,1,0],[1,0,0,1,1,0]] #Same Data Stream x2\n",
    "#data_shift = [0,int(ovs/2)] #Data Streams Offset 1/2 Bit Duration\n",
    "\n",
    "#TX\n",
    "P_max = 1 #LED Maximum Output Power\n",
    "TauOn = 2e-6 #Tau for Rising Edge in us\n",
    "TauOff = 1e-6 #Tau for Falling Edge in us\n",
    "\n",
    "#RX\n",
    "P_mindetect = 0.0 #Minimum Power which can be detected\n",
    "P_maxdetect = 5 #Maximum Power which can be detected (otherwise saturation)\n",
    "\n",
    "n_sigma = 0.01\n",
    "n_seed = 1\n",
    "#-----------------------------------------\n",
    "\n",
    "\n",
    "\n",
    "plt.figure(figsize=(10,8)) #Prepare Plot\n",
    "seed(n_seed) #Init Random Generator\n",
    "\n",
    "l = len(data[0])*ovs #Number of Samples\n",
    "out = np.zeros(l) #Output Vector for Final Result\n",
    "t = np.zeros(l) #Time Vector\n",
    "n = np.zeros(l) #Noise Vector\n",
    "dt = 1/(rate*ovs) #Duration of one Sample\n",
    "\n",
    "for i in range(l):\n",
    "    n[i] = gauss(0.0, n_sigma) #Generate Noise Samples\n",
    "    t[i] = dt*i #Set Time Markers for Plotting\n",
    "\n",
    "def run_led(d, shift=0, label=''):\n",
    "    P = 0\n",
    "    tmp_out = np.zeros(l)\n",
    "    for i in range(len(d)):\n",
    "        for j in range(ovs):\n",
    "            if d[i]: #Data = 1\n",
    "                P += (P_max - P) * (1-np.exp(-dt/TauOn))\n",
    "            else: #Data = 0\n",
    "                P *=  np.exp(-dt/TauOff);\n",
    "            tmp_out[(i*ovs)+j] = P\n",
    "    #print(tmp_out)\n",
    "    if shift:\n",
    "        tmp_out = np.roll(tmp_out, shift)\n",
    "    plt.plot(t, tmp_out, marker = '.', linestyle = '-', label = 'LED '+str(label))\n",
    "    return tmp_out\n",
    "    \n",
    "def show_plot():\n",
    "    plt.plot(t, out, marker = '+', linestyle = '-', label = 'RX Output')\n",
    "    plt.minorticks_on()\n",
    "    plt.ylabel('Output')\n",
    "    plt.xlabel('Time/s')\n",
    "    plt.legend(loc = 'upper right')\n",
    "    plt.grid(True)\n",
    "    plt.show()\n",
    "\n",
    "i = 0\n",
    "for d in data: #Process Data Stream and Sum-Up of Outputs\n",
    "    out += run_led(d, data_shift[i], i)\n",
    "    i += 1\n",
    "\n",
    "i = 0\n",
    "for o in out: #Clipping at Receiver Side\n",
    "    if o > P_maxdetect:\n",
    "        out[i] = P_maxdetect\n",
    "    elif o < P_mindetect:\n",
    "        out[i] = 0.0\n",
    "    i += 1\n",
    "out += n #Add Noise Vector\n",
    "\n",
    "def data_recover(chip_sequences, trans_data):\n",
    "    \n",
    "\n",
    "    stretch_seq0 = np.repeat(chip_sequences[0],ovs)\n",
    "    stretch_seq1 = np.repeat(chip_sequences[1],ovs)\n",
    "    loop_length = len(data1)\n",
    "    stretch_length = len(chip_sequences[0])*ovs\n",
    "\n",
    "    i = 0\n",
    "    j = stretch_length\n",
    "    threshold_value = .2915\n",
    "    data1_recovered = np.zeros(len(data1))\n",
    "    data2_recovered = np.zeros(len(data2))\n",
    "    l = 0\n",
    "\n",
    "    for k in range(loop_length):\n",
    "        user1_product = (np.dot(stretch_seq0,trans_data[i:j]))/stretch_length\n",
    "        user2_product = (np.dot(stretch_seq1,trans_data[i:j]))/stretch_length\n",
    "\n",
    "        if user1_product < threshold_value:\n",
    "            data1_recovered[l] = 0\n",
    "        else:\n",
    "            data1_recovered[l] = 1\n",
    "\n",
    "        if user2_product < threshold_value:\n",
    "            data2_recovered[l] = 0\n",
    "        else:\n",
    "            data2_recovered[l] = 1\n",
    "\n",
    "        l+=1\n",
    "        i = j\n",
    "        j+=stretch_length\n",
    "    return data1_recovered, data2_recovered\n",
    "    \n",
    "data_recovered1,data_recovered2 = data_recover(sequences,out)  \n",
    "\n",
    "#print(data_recovered1, data_recovered2)\n",
    "#print(data1,data2)\n",
    "print(np.count_nonzero(data_recovered1 != data1))\n",
    "print(np.count_nonzero(data_recovered2 != data2))\n",
    "\n",
    "show_plot()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
